//TODO BUG ol-geocoder.js has no banner
//TODO BUG Geocoder : send button too far to the left on Android (ex: chemineur)
//TODO simplify sources delivery in npm / Add zip in github version
//TODO tests test:providers KO
//TODO tests test:unit KO
//BEST tests: delete -((win, doc) => {

Next dÃ©livery
#283
new embed cursor
getVersion()

*** *** *** *** *** *** *** *** *** ***
TypeScript Typings, Exports #248
Would be really nice if there were TypeScript Typings

Would also be good to see how to import this when in Node.js environment (whether Geocoder is default or named export)
TypeScript


I had a deep thinking & hesitations about this.
Typescript is a good environment for safe & controled software, especialy for new or big & professional projects.
I am less sure that it's mandatory for a sustaining phase where we need simplicity & reduce dependancies & risk of deprecated tools.
ol-geocoder is a quite simple package & Typescript don't add any feature for the end user.

We do have too many dependencies packages (1186 - 326 Mo where Openlayers only has 857)
This is not only a nightmare to maintain, but also to learn, too many files if you want to grep something in the package, ...
Also, Typescript multiply by 3 the number of code files : xxx.d.ts xxx.d.ts.map & needs to learn a different language
For these reasons, I would like to avoid any solution adding complexity but rather to reduce it.

Export as a node module & test with vite is a very important feature as the aim of ol-geocoder is to be included in projects using openlayers & other compatible packages.
I will follow up in a separate issue (please always raise differents topics on separate issues)


Export ol-geocoder as a module & npm-vite tests VS sass

Export as a node module & test with vite is a very important feature as the aim of ol-geocoder is to be included in projects using openlayers & other compatible packages.
There is a few to do with, I already do this in my project https://github.com/Dominique92/MyOl but with some turnaround that I have to fix.

One of these is sass.
We cannot export a module including sass without adding vite & vite-plugin-sass-dts in the packages dependencies.
I know, this is easy to install by this is, again, adding tools to tools, including in the receiving project.
Also, sass makes the style test & changes difficult:
- As the html id is different from the sass constants, we can't use grep to search from the debug information where the related sass lies.
- It's necessary to rebuild the package for any css modification attempt, even on vite. May be there is a tols for that, but this is, again, adding a tool to tools, ...
- scss will depreciate the calculation inside a declaration, we must use calc() in place
- calc() introduce a type verification (e.g. dont ass em to px) that drives a nightmare to correct
- I did not fiond any debug nor trace facility to 
- Trying to add a vite sass preprocessor drives me to a very complex modules architecture & debug build-css.js (that I don't really understand)
- As I know, sass doesn't offer any feature to the end user, has a limited impact on code quality & increase the maintenance efforts.
- This blocks to use vite test environment & to deliver geocoder as a module to be integrated to a new project

I know it's a pitty to regress from the excellent tooling of this projets & I hesitates a lot, but we do need to go to the most simple code & tooling (js, sass, a bit of html) to make is more sustainable & facilitate the projects inclusion.

I would be pleased to discuss cons/pro about this before converting sass files to css.


*** *** *** *** *** *** *** *** *** ***
NPM delivery
https://docs.npmjs.com/creating-and-publishing-scoped-public-packages
npm init --scope=@dom92
npm adduser myol
npm whoami
npm publish --access public

npm audit fix --force
Remettre dependancies: {}.
beautify

npm install
npm run beautify > $null
npm run lint:dom
npm run build
npx vite --force

DELIVER A VERSION :
package.json
  "name": "ol-geocoder",
  "version": "4.3.2",
  "description": "A geocoder extension compatible with OpenLayers v6.x to 9.0.0",
remove
    "src",

gen : a ?????????????????????

github commit
Bump to v4.3.2
#279 Bump @babel/traverse from 7.22.17 to 7.23.2
#280 Bump @adobe/css-tools from 4.3.1 to 4.3.2
#282 Tile layer is hidden by the marker layer in Openlayers 9.0.0

github
Releases
Draft a new release
Chose a tag
v4.3.2 : Create a new tag
Release title : v4.3.2
Describe :
#279 Bump @babel/traverse from 7.22.17 to 7.23.2
#280 Bump @adobe/css-tools from 4.3.1 to 4.3.2
#282 Tile layer is hidden by the marker layer in Openlayers 9.0.0
Zip dist : ol-geocoder-4.3.2.zip
Attach binaries by dropping them here or selecting them.
Publish release

npm publish --access public


*** *** *** *** *** *** *** *** *** ***
SASS
- New language to learn to maintain
- Difficult to read (reference to konstant values may be wrong)
- Increase number of tools / dependancies / obsolescence
- Use in vite
- no CSS beautifier available or specific
- Deliver as a module

##### Import in a nodejs project
```javascript
// Import CSS and Javascript
import '../dist/ol-geocoder.css';
import Geocoder from '../src/base';

const geocoder = new Geocoder('nominatim', {...});
```
See this [example](https://dominique92.github.io/ol-geocoder/examples/nodejs.html).

npm init @eslint/config
fichier .eslintrc.cjs
  settings: {
    react: {
     version: "detect",
    },
  },
npm i react
npx eslint src/*/*.js
